<?php
/**
  @file
  @brief Defines the Edit Table API functions.
  @note
    The following Data structures are used
    throughout this module.

    1. Edit Table Data Arrays.
       Edit Table Data Arrays are used to describe
       tables in a slightly more abstract format.
       This structure extends the Table Data Array
       structure defined by simple_table, by adding
       several new parameters.
       Each array must have the following structure.

         array (
           'module'  => '<module name>'                         // Required if you are using any callback functions. This is used to load the module's include file.
           'caption' => <caption>                               // required.
           'rows' => array (<row name>, ...),                   // optional.
           'columns' => array (                                 // optional.
             array (
               'column_name' => <column name>,                  // required.
               'label'       => <column label>,                 // optional.
               'weight'      => <weight>),                      // required.
             ...
           ),
           'sortable'    => <true|false>,                       // optional (default true). Whether or not users may change the sorting.
           'sort_column' => <column name>,                      // optional. (may be 'none').
           'label_column_name' => <column name>,                // optional. The name of the column that holds row labels.
           'show_totals' => <true|false>,                       // optional (default false).
           'fields' => array (
              array ('field_id'      => <field id>,             // optional. The field id associated with the field form element.
                     'editable'      => <true or false>,        // optional. (default false).
                     'column_name'   => <column name>,          // required.
                     'row_name'      => <row name>,             // required.
                     'value'         => <field value>,          // required.
                     'display_value' => <display field value>), // optional.
                ...
           ),
           'field_width'     => <field width>,                  // optional (default 5).
           'submit_function' => <form submit callback>,         // required.
           'access_function' => <callback (user) -> bool>,      // optional.
           'default_field_value_function'  => <callback (column_name, row_name) -> field_value> // optional.
           'default_field_value_arguments' => array (<additional argument>) // optional. Additional arguments to pass to the default value function.

        note that 'footer' is a reserved row name,
        used to denote the table footer row.

        note also that display_value may be a form
        element array as defined by the Form API.
        When it is, only the simple_table_form
        function may be used to render the data
        array. Otherwise, display_value should
        simply be a string.

        note also that PHP's function reference
        system is temperamental, you must make sure
        that you manually include any files that
        you need (preferably by calling
        module_load_include) within all of your
        callback functions.
*/

/**
  @brief Accepts a field value and wraps that
    value within a textfield form element so that
    it can be embeded into an editable table.
  @param $value (string) the field value.
  @param $field_width (int) the textfield width.
  @param $suffix (string) an optional suffix.
  @return (array) the form element.
*/
function edit_table_wrap_value ($value, $suffix = null, $field_width = 5) {
  $elem = array (
    '#type'          => 'textfield',
    '#default_value' => $value,
    '#size'          => $field_width
  );
  if (!is_null ($suffix)) {
    $elem ['#suffix'] = $suffix;
  }
  return $elem;
}

/**
  @brief Defines the default field value function
    for editable tables. This function essentially
    wraps a call to the default field value
    function given in the data array and wraps the
    value returned within a textfield form element.
*/
function edit_table_default_field_value ($column_name, $row_name, $default_field_value_function, $default_field_value_arguments, $field_width) {
  $arguments = array ($column_name, $row_name);
  if ($default_field_value_arguments) {
    $arguments = array_merge ($arguments, $default_field_value_arguments);
  }
  $field = call_user_func_array ($default_field_value_function, $arguments);
  if (isset ($field ['editable']) && $field ['editable']) {
    $field ['display_value'] = edit_table_wrap_value (
                                 $field ['value'],
                                 isset ($field ['suffix']) ? $field ['suffix'] : null,
                                 $field_width
                               );
  }
  return $field;
}

/**
  @brief Accepts a Edit Table Data Array and returns an Edit Table form.
  @param $data (array) the Edit Table Data array.
  @return (array) the form.
*/
function edit_table_form ($form, $form_state, $data = null) {
  if (is_null ($data)) {
    return array ();
  }
  if (isset ($data ['module'])) {
    module_load_include ('inc', $data ['module']);
  }
  global $user;
  $editable = isset ($data ['access_function']) && call_user_func ($data ['access_function'], $user);
  if ($editable) {
    $data ['sortable'] = false;
    $field_width = isset ($data ['field_width']) ? $data ['field_width'] : 5;
    foreach ($data ['fields'] as &$field) {
      if (isset ($field ['editable']) && $field ['editable']) {
        $field ['display_value'] = edit_table_wrap_value (
          $field ['value'],
          $field_width
        );
      }
    }
    if (isset ($data ['default_field_value_function'])) {
      $data ['default_field_value_arguments'] = array (
        $data ['default_field_value_function'],
        isset ($data ['default_field_value_arguments']) ? $data ['default_field_value_arguments'] : array (),
        $field_width
      );
      $data ['default_field_value_function'] = 'edit_table_default_field_value';
    }
  }
  $form = drupal_get_form ('simple_table_form', $data);
  if ($editable) {
    $form [] = array (
      '#type'   => 'submit',
      '#value'  => t ('Update'),
      '#submit' => array ($data ['submit_function'])
    );
  }
  return $form;
}

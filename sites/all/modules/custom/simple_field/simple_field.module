<?php
/**
  @file
  @brief The Simple Field module defines a simple
    API for creating common field types.
*/

/**
  @brief Creates a textarea field.
  @param $type (object) the content type that the field will be added to.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_textarea ($type, $name, $label) {
  $field = field_info_field($name);
  $instance = field_info_instance('node', $name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name'   => $name,
      'type'         => 'text_long',
      'entity_types' => array('node'),
    );  
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name'  => $name,
      'entity_type' => 'node',
      'bundle'      => $type->type,
      'label'       => $label,
      'widget'      => array('type' => 'text_textarea'),
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),  
        'teaser'    => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),  
      ),  
    );  
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
  @brief Creates a text field.
  @param $type (object) the content type that the field will be added to.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_textfield ($type, $name, $label) {
  $field = field_info_field($name);
  $instance = field_info_instance('node', $name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name'   => $name,
      'type'         => 'text',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name'  => $name,
      'entity_type' => 'node',
      'bundle'      => $type->type,
      'label'       => $label,
      'widget'      => array('type' => 'text_textfield'),
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),
        'teaser'    => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
  @brief Creates a term reference field.
  @param $type (object) the content type.
  @param $name (string) the field name.
  @param $label (string) the field label.
  @param $machineName (string) the vocabulary
    machine name.
  @param $cardinality (int) the default
    cardinality. Default
    FIELD_CARDINALITY_UNLIMITED.
*/
function simple_field_create_term_reference ($type, $name, $label, $machineName, $cardinality = FIELD_CARDINALITY_UNLIMITED) {
  $field = field_info_field ($name);
  $instance = field_info_instance ('node', $name, $type->type);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'taxonomy_term_reference',
      'entity_types' => array ('node'),
      'cardinality'  => $cardinality,
      'settings'     => array (
        'allowed_values' => array (
          array ('vocabulary' => $machineName,
                 'parent' => 0)
        ),
      )
    ));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'  => $name,
      'entity_type' => 'node',
      'bundle'      => $type->type,
      'label'       => $label,
      'widget'      => array (
        'type' => 'options_select',
      ),
      'settings'    => array (
        'text_processing' => true
      ),
      'display'     => array (
        'default' => array (
          'label' => 'above',
          'type'  => 'text',
          'default_formatter' => 'text_plain'
        ),
        'teaser'    => array (
          'label' => 'above',
          'type'  => 'text',
          'default_formatter' => 'text_plain'
        )
      )
    ));
  }

  return $instance;
}

/**
  @brief Creats an entity reference field.
  @param $type (object) the content type.
  @param $name (string) the field name.
  @param $label (string) the field label.
  @param $target_types (array) the target types.
  @param $cardinality (int) the default
    cardinality. Default
    FIELD_CARDINALITY_UNLIMITED.
*/
function simple_field_create_entity_reference ($type, $name, $label, $target_types, $cardinality = FIELD_CARDINALITY_UNLIMITED) {
  $field = field_info_field ($name);
  $instance = field_info_instance ('node', $name, $type->type);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'entityreference',
      'entity_types' => array ('node'),
      'cardinality'  => $cardinality,
      'settings'     => array (
        'handler_settings' => array (
          'target_bundles' => $target_types,
          'sort' => array ('type' => 'none')
    ))));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'   => $name,
      'entity_type'  => 'node',
      'bundle'       => $type->type,
      'label'        => $label,
      'widget'       => array ('type' => 'entityreference_autocomplete'),
      'display'      => array (
        'default' => array (
          'label' => 'Subject',
          'type'  => 'entityreference_entity_view'
      ))
    ));
  }
  return $instance;
}

/**
  @brief Creates a date field and adds it to the
    PubMed content type.
  @param $type (object) the content type.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_date_field ($type, $name, $label) {
  $field = field_info_field ($name);
  $instance = field_info_instance ('node', $name, $type->type);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'date',
      'entity_types' => array ('node'),
      'cardinality'  => 1
    ));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'  => $name,
      'entity_type' => 'node',
      'bundle'      => $type->type,
      'label'       => $label,
      'widget'      => array (
        'type' => 'date_select',
      ),
      'settings'    => array (
        'text_processing' => true
      ),
      'display'     => array (
        'default' => array (
          'label' => 'above',
          'type'  => 'date',
          'default_formatter' => 'date_default',
        ),
        'teaser'    => array (
          'label' => 'above',
          'type'  => 'date',
          'default_formatter' => 'date_default',
        )
      )
    ));
  }

  return $instance;
}

/**
  @brief Adds an entity id to an entity reference field.
  @param $id (integer) the entity id.
  @return (array) the field value.
*/
function simple_field_create_entity_reference_value ($id) {
  return array ('target_id' => $id);
}

/**
  @brief Returns a date field value.
  @param $year (int) the year.
  @param $month (int) the month.
  @param $day (int) the day.
  @return (array) the field value.
*/
function simple_field_create_date_field_value ($year, $month, $day) {
  return array (
    'value' => sprintf ('%04d-%02d-%02dT12:00:00', $year, $month, $day),
    'date_type' => 'date'
  );
}
